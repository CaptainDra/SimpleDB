package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;
    private TupleDesc tupleDesc;
    private Tuple tuple1;
    private Tuple tuple2;
    private HashMap<Field, ArrayList<Tuple>> map = new HashMap<>();

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        this.tupleDesc = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return tupleDesc;
    }

    public String getJoinField1Name()
    {
        // some code goes here
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here

        child1.open();
        child2.open();
        while(child2.hasNext()){
            Tuple t = child2.next();
            Field key = t.getField(p.getField2());
            if(!map.containsKey(key)) map.put(key,new ArrayList<>());
            ArrayList<Tuple> block = map.get(key);
            block.add(t);
        }
        //scanChild();
        super.open();
    }

    public void close() {
        // some code goes here
        child1.close();
        child2.close();
        super.close();
        tuple1 = null;
        tuple2 = null;
        listIt = null;
        map.clear();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        child1.rewind();
        child2.rewind();
    }

    transient Iterator<Tuple> listIt = null;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */

    private boolean scanChild() throws DbException, TransactionAbortedException{
        int count = 0;
        map.clear();
        while(child2.hasNext()){
            tuple2 = child2.next();
            ArrayList<Tuple> list;
            if(map.get(tuple2.getField(p.getField1()))!=null){
                list = map.get(tuple2.getField(p.getField1()));
            }
            else{
                list = new ArrayList<>();
                map.put(tuple2.getField(p.getField1()),list);
            }
            list.add(tuple2);
            count++;
        }
        return count > 0;
    }
    public Tuple merge(Tuple t1, Tuple t2){
        Tuple mergeRes = new Tuple(tupleDesc);
        for(int i = 0; i < child1.getTupleDesc().numFields(); ++i){
            mergeRes.setField(i, t1.getField(i));
            //System.out.println(i);
        }
        for (int i = 0; i < child2.getTupleDesc().numFields(); ++i){
            mergeRes.setField(i+ child1.getTupleDesc().numFields(), t2.getField(i));
            //System.out.println(i);
        }
        return mergeRes;
    }
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here

        if (listIt != null && listIt.hasNext()) {
            tuple2 = listIt.next();
            return merge(tuple1, tuple2);
        }
        while (child1.hasNext()) {

            tuple1 = child1.next();
            //System.out.println(tuple2.getField(p.getField2()));
            if(map.get(tuple1.getField(p.getField1())) == null) continue;
            ArrayList<Tuple> list = map.get(tuple1.getField(p.getField1()));

            listIt = list.iterator();
            return fetchNext();
        }
        return null;
        //copy code from Join.java could also pass the test
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        DbIterator[] children = new DbIterator[2];
        children[0] = child1;
        children[1] = child2;
        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        child1= children[0];
        child2 = children[1];
    }

}
